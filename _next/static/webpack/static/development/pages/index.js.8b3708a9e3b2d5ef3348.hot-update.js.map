{"version":3,"file":"static/webpack/static/development/pages/index.js.8b3708a9e3b2d5ef3348.hot-update.js","sources":["webpack:///./src/Components/Layouts/Portal.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport {\n  Form,\n  Grid,\n  Header,\n  Segment,\n  TransitionablePortal,\n  Button\n} from \"semantic-ui-react\";\n\nexport default class TransitionablePortalExampleTransition extends Component {\n  state = { animation: \"fade up\", duration: 1200, open: false, qId: 0 };\n\n  Quotes = [\n    {\n      header: \"Thomas Hauser\",\n      quote:\n        'Not voting, is disrespecting the \"best\" of what our nation stands for.'\n    },\n    {\n      header: \"Unknown\",\n      quote: \"The right of election is the very essence of the constitution.\"\n    },\n    {\n      header: \"Patty Berg\",\n      quote: \"People are what any election is all about.\"\n    }\n  ];\n\n  handleClick = id => {\n    this.setState({ open: !this.state.open, qId: id });\n    this.setState({ open: !this.state.open });\n  };\n\n  renderPortalContent = () => {\n    return (\n      <Segment\n        style={{\n          left: \"40%\",\n          position: \"fixed\",\n          top: \"50%\",\n          zIndex: 1000\n        }}\n      >\n        <Header>{this.Quotes[this.state.qId].header}</Header>\n        <p>{this.Quotes[this.state.qId].quote}</p>\n      </Segment>\n    );\n  };\n\n  render() {\n    const { animation, duration, open } = this.state;\n\n    return (\n      <Grid columns={2}>\n        <Grid.Column>\n          <Form>\n            <Form.Button\n              content={open ? \"Close Portal\" : \"Open Portal\"}\n              negative={open}\n              positive={!open}\n              onClick={() => this.handleClick(1)}\n            />\n          </Form>\n          <Button.Group size=\"small\">\n            <Button onClick={() => this.handleClick(0)}>One</Button>\n            <Button onClick={() => this.handleClick(1)}>Two</Button>\n            <Button onClick={() => this.handleClick(2)}>Three</Button>\n          </Button.Group>\n          <TransitionablePortal\n            open={open}\n            transition={{ animation, duration }}\n          >\n            {this.renderPortalContent()}\n          </TransitionablePortal>\n        </Grid.Column>\n      </Grid>\n    );\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAQA;;;;;;;;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAFA;AAMA;AACA;AAFA;AAKA;AACA;AAFA;AACA;AAKA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;;;;;;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;;;;AApEA;AACA;;;;;A","sourceRoot":""}