{"version":3,"file":"static/webpack/static/development/pages/index.js.c2b37a6835d50c1b0cd8.hot-update.js","sources":["webpack:///./src/Components/Pages/When.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport classes from \"../../../static/css/When.css\";\nimport { Transition, Segment, Grid, GridColumn } from \"semantic-ui-react\";\n\nexport default class When extends Component {\n  state = {\n    endDate: new Date(\"4/01/2019\"),\n    days: 0,\n    daysShuffle: true,\n    hours: 0,\n    hoursShuffle: true,\n    minutes: 0,\n    minutesShuffle: true,\n    seconds: 0,\n    secondsShuffle: true\n  };\n\n  componentDidMount() {\n    this.timerID = setInterval(() => this.updateTime(), 800);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  updateTime = () => {\n    // get new date\n    const time = new Date();\n    // set time units\n    const hours = Math.abs(24 - time.getHours() - 1);\n    const minutes = Math.abs(60 - time.getMinutes());\n    const seconds = Math.abs(60 - time.getSeconds());\n\n    const timeDiff = Math.abs(this.state.endDate.getTime() - time.getTime());\n    const diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));\n    const days = diffDays;\n    // on hour chanage, update hours and shuffle state\n\n    if (days !== this.state.days) {\n      let daysShuffle = !this.state.daysShuffle;\n      this.setState({\n        daysShuffle\n      });\n      daysShuffle = !this.state.daysShuffle;\n      this.setState({\n        days,\n        daysShuffle\n      });\n    }\n    if (hours !== this.state.hours) {\n      let hoursShuffle = !this.state.hoursShuffle;\n      this.setState({\n        hoursShuffle\n      });\n      hoursShuffle = !this.state.hoursShuffle;\n      this.setState({\n        hours,\n        hoursShuffle\n      });\n    }\n    // on minute chanage, update minutes and shuffle state\n    if (minutes !== this.state.minutes) {\n      let minutesShuffle = !this.state.minutesShuffle;\n      this.setState({\n        minutesShuffle\n      });\n      minutesShuffle = !this.state.minutesShuffle;\n      this.setState({\n        minutes,\n        minutesShuffle\n      });\n    }\n    // on second chanage, update seconds and shuffle state\n    if (seconds !== this.state.seconds) {\n      let secondsShuffle = !this.state.secondsShuffle;\n      this.setState({\n        secondsShuffle\n      });\n      secondsShuffle = !this.state.secondsShuffle;\n      this.setState({\n        seconds,\n        secondsShuffle\n      });\n    }\n  };\n\n  renderDigit = (digit, visible) => {\n    return (\n      <Transition visible={visible} animation=\"slide up\" duration={800}>\n        <h1>{digit}</h1>\n      </Transition>\n    );\n  };\n\n  render() {\n    return (\n      <div>\n        <Grid className={classes.when}>\n          <Grid.Column width={3} className={classes.empty} />\n          <Grid.Column width={10} verticalAlign=\"middle\">\n            <Grid>\n              <Grid.Row columns={4}>\n                <Grid.Column>\n                  <Segment>\n                    {this.renderDigit(this.state.days, this.state.daysShuffle)}\n                  </Segment>\n                </Grid.Column>\n                <Grid.Column>\n                  <Segment>\n                    {this.renderDigit(\n                      this.state.hours,\n                      this.state.hoursShuffle\n                    )}\n                  </Segment>\n                </Grid.Column>\n                <Grid.Column>\n                  <Segment>\n                    {this.renderDigit(\n                      this.state.minutes,\n                      this.state.minutesShuffle\n                    )}\n                  </Segment>\n                </Grid.Column>\n                <Grid.Column>\n                  <Segment>\n                    {this.renderDigit(\n                      this.state.seconds,\n                      this.state.secondsShuffle\n                    )}\n                  </Segment>\n                </Grid.Column>\n              </Grid.Row>\n            </Grid>\n          </Grid.Column>\n          <Grid.Column width={3} className={classes.empty} />\n        </Grid>\n      </div>\n    );\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AACA;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AADA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AACA;AAAA;AACA;AADA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AADA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AADA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;;;;;;AA5EA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;;;AAEA;AACA;AACA;;;AAutIA;AACA;;;;;A","sourceRoot":""}