{"version":3,"file":"static/webpack/static/development/pages/index.js.44f2d7dc8103dda07043.hot-update.js","sources":["webpack:///./src/Components/Pages/When.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport classes from \"../../../static/css/When.css\";\nimport { Transition, Segment, Grid, GridColumn } from \"semantic-ui-react\";\n\nexport default class When extends Component {\n  state = {\n    endDate: new Date(\"4/01/2019\").getTime(),\n    days: 0,\n    daysShuffle: true,\n    hours: 0,\n    hoursShuffle: true,\n    minutes: 0,\n    minutesShuffle: true,\n    seconds: 0,\n    secondsShuffle: true\n  };\n\n  componentDidMount() {\n    this.timerID = setInterval(() => this.updateTime(), 50);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  updateTime = () => {\n    // get new date\n    const time = new Date();\n    // set time units\n    const hours = time.getHours();\n    const minutes = time.getMinutes();\n    const seconds = time.getSeconds();\n\n    const timeDiff = Math.abs(this.state.endDate - time.getTime());\n    const diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));\n    const days = diffDays;\n    // on hour chanage, update hours and shuffle state\n\n    if (days !== this.state.days) {\n      const daysShuffle = !this.state.daysShuffle;\n      this.setState({\n        days,\n        daysShuffle\n      });\n    }\n    if (hours !== this.state.hours) {\n      const hoursShuffle = !this.state.hoursShuffle;\n      this.setState({\n        hours,\n        hoursShuffle\n      });\n    }\n    // on minute chanage, update minutes and shuffle state\n    if (minutes !== this.state.minutes) {\n      const minutesShuffle = !this.state.minutesShuffle;\n      this.setState({\n        minutes,\n        minutesShuffle\n      });\n    }\n    // on second chanage, update seconds and shuffle state\n    if (seconds !== this.state.seconds) {\n      const secondsShuffle = !this.state.secondsShuffle;\n      this.setState({\n        seconds,\n        secondsShuffle\n      });\n    }\n  };\n\n  renderDays = () => {\n    return (\n      <Transition visible={true} animation=\"slide up\" duration={500}>\n        <h1>{this.state.days}</h1>\n      </Transition>\n    );\n  };\n  renderHours = () => {\n    return (\n      <Transition visible={true} animation=\"slide up\" duration={500}>\n        <h1>{this.state.hours}</h1>\n      </Transition>\n    );\n  };\n  renderMinutes = () => {\n    return (\n      <Transition visible={true} animation=\"slide up\" duration={500}>\n        <h1>{this.state.minutes}</h1>\n      </Transition>\n    );\n  };\n  renderSeconds = () => {\n    return (\n      <Transition visible={true} animation=\"slide up\" duration={500}>\n        <h1>{this.state.seconds}</h1>\n      </Transition>\n    );\n  };\n\n  render() {\n    // state object destructuring\n    const {\n      hours,\n      minutes,\n      seconds,\n      hoursShuffle,\n      minutesShuffle,\n      secondsShuffle\n    } = this.state;\n\n    return (\n      <div className={classes.when}>\n        <Grid>\n          <Grid.Column width={4} className={classes.empty} />\n          <Grid.Column width={8}>\n            <Grid.Row>\n              <Grid columns={4}>\n                <Grid.Column>{this.renderDays()}</Grid.Column>\n                <Grid.Column>{this.renderHours()}</Grid.Column>\n                <Grid.Column>{this.renderMinutes()}</Grid.Column>\n                <Grid.Column>{this.renderSeconds()}</Grid.Column>\n              </Grid>\n            </Grid.Row>\n          </Grid.Column>\n          <Grid.Column width={4} className={classes.empty} />\n        </Grid>\n      </div>\n    );\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AACA;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;;;;;;AAjFA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;;;AAEA;AACA;AACA;;;AA4EA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;AA5HA;AACA;;;;;A","sourceRoot":""}