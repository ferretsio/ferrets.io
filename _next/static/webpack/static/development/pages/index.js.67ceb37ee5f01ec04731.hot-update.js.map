{"version":3,"file":"static/webpack/static/development/pages/index.js.67ceb37ee5f01ec04731.hot-update.js","sources":["webpack:///./src/Components/Layouts/Portal.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport {\n  Form,\n  Grid,\n  Header,\n  Segment,\n  TransitionablePortal\n} from \"semantic-ui-react\";\n\nconst transitions = \"fade up\";\nconst options = transitions.map(name => ({\n  key: name,\n  text: name,\n  value: name\n}));\n\nexport default class Portal extends Component {\n  state = { animation: transitions, duration: 500, open: false };\n\n  handleChange = (e, { name, value }) => this.setState({ [name]: value });\n\n  handleClick = () => this.setState({ open: !this.state.open });\n\n  render() {\n    const { animation, duration, open } = this.state;\n\n    return (\n      <Grid columns={2}>\n        <Grid.Column>\n          <Form>\n            <Form.Select\n              label=\"Choose transition\"\n              name=\"animation\"\n              onChange={this.handleChange}\n              options={options}\n              value={animation}\n            />\n            <Form.Input\n              label={`Duration: ${duration}ms `}\n              min={100}\n              max={2000}\n              name=\"duration\"\n              onChange={this.handleChange}\n              step={100}\n              type=\"range\"\n              value={duration}\n            />\n            <Form.Button\n              content={open ? \"Close Portal\" : \"Open Portal\"}\n              negative={open}\n              positive={!open}\n              onClick={this.handleClick}\n            />\n          </Form>\n\n          <TransitionablePortal\n            open={open}\n            transition={{ animation, duration }}\n          >\n            <Segment\n              style={{\n                left: \"40%\",\n                position: \"fixed\",\n                top: \"50%\",\n                zIndex: 1000\n              }}\n            >\n              <Header>This is a controlled portal</Header>\n              <p>\n                Portals have tons of great callback functions to hook into.\n              </p>\n              <p>To close, simply click the close button or click away</p>\n            </Segment>\n          </TransitionablePortal>\n        </Grid.Column>\n      </Grid>\n    );\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAQA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AACA;AAKA;;;;;;;;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AAJA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;;;;AA7DA;AACA;;;;;A","sourceRoot":""}