{"version":3,"file":"static/webpack/static/development/pages/index.js.40dd08772a93e0fe351d.hot-update.js","sources":["webpack:///./src/Components/Pages/When.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport classes from \"../../../static/css/When.css\";\nimport { Transition, Segment } from \"semantic-ui-react\";\n\nexport default class When extends Component {\n  state = {\n    hours: 0,\n    hoursShuffle: true,\n    minutes: 0,\n    minutesShuffle: true,\n    seconds: 0,\n    secondsShuffle: true\n  };\n\n  componentDidMount() {\n    this.timerID = setInterval(() => this.updateTime(), 50);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  updateTime = () => {\n    // get new date\n    const time = new Date();\n    // set time units\n    const hours = time.getHours();\n    const minutes = time.getMinutes();\n    const seconds = time.getSeconds();\n    // on hour chanage, update hours and shuffle state\n    if (hours !== this.state.hours) {\n      const hoursShuffle = !this.state.hoursShuffle;\n      this.setState({\n        hours,\n        hoursShuffle\n      });\n    }\n    // on minute chanage, update minutes and shuffle state\n    if (minutes !== this.state.minutes) {\n      const minutesShuffle = !this.state.minutesShuffle;\n      this.setState({\n        minutes,\n        minutesShuffle\n      });\n    }\n    // on second chanage, update seconds and shuffle state\n    if (seconds !== this.state.seconds) {\n      const secondsShuffle = !this.state.secondsShuffle;\n      this.setState({\n        seconds,\n        secondsShuffle\n      });\n    }\n  };\n\n  renderDays = () => {\n    return (\n      <Transition visible={true} animation=\"slide up\" duration={500}>\n        <h1>23</h1>\n      </Transition>\n    );\n  };\n  renderHours = () => {\n    return (\n      <Transition visible={visible} animation=\"slide up\" duration={500}>\n        <h1>23</h1>\n      </Transition>\n    );\n  };\n  renderMinutes = () => {\n    return (\n      <Transition visible={visible} animation=\"slide up\" duration={500}>\n        <h1>23</h1>\n      </Transition>\n    );\n  };\n  renderSeconds = () => {\n    return (\n      <Transition visible={visible} animation=\"slide up\" duration={500}>\n        <h1 />\n      </Transition>\n    );\n  };\n\n  render() {\n    // state object destructuring\n    const {\n      hours,\n      minutes,\n      seconds,\n      hoursShuffle,\n      minutesShuffle,\n      secondsShuffle\n    } = this.state;\n\n    return (\n      <div className={classes.when}>\n        {this.renderDays()}\n        {this.renderHours()}\n        {this.renderMinutes()}\n        {this.renderSeconds()}\n      </div>\n    );\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAgrEA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;;;AAEA;AACA;AACA;;;AAgEA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;;;;AAnGA;AACA;;;;;A","sourceRoot":""}